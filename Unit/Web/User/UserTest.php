<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for User.
 * Generated by PHPUnit on 2010-04-26 at 12:59:27.
 */
class UserTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var User
	 */
	protected $object;

	/**
	 * @var IStorage
	 */
	protected $storage;

	/**
	 * @var IEventEmitter
	 */
	protected $emitter;



	protected function setUp()
	{
		$this->storage = $this->getMock('IStorage');
		$this->storage->expects($this->once())
			 ->method('read')
			 ->will($this->returnValue(array(
				 'name' => 'John Doe',
				 'age'  => 41
			 )));

		$this->emitter = $this->getMock('IEventEmitter');
		$this->emitter->expects($this->once())->method('notify');

		$this->object = new User($this->storage, $this->emitter);
	}

	protected function tearDown()
	{
	}

	public function testSetAttributes()
	{
		$this->object->setProperties(array(
			'info' => 'nearly nothing'
		));
		$this->assertThat(
			$this->object->getProperties(),
			$this->equalTo(array(
				'info' => 'nearly nothing'
			))
		);
	}

	public function testSetAttribute()
	{
		$this->object->setProperty('state', 'NY');
		$this->assertThat(
			$this->object->getProperty('state'),
			$this->equalTo('NY')
		);
	}

	public function testGetAttribute()
	{
		$this->assertThat(
			$this->object->getProperty('name'),
			$this->equalTo('John Doe')
		);
	}

	public function testGetAttribute_Undefined()
	{
		$this->assertThat(
			$this->object->getProperty('undefined', 'default value'),
			$this->equalTo('default value')
		);
	}

	public function testGetAttributes()
	{
		$this->assertThat(
			$this->object->getProperties(),
			$this->equalTo(array(
				'name' => 'John Doe',
				'age'  => 41
			))
		);
	}

	public function testDestruct_Event_StorageWrite()
	{
		// test read, write from storage on creation and destruction
		$storage = $this->getMock('IStorage');
		$storage->expects($this->once())
			 ->method('read')
			 ->will($this->returnValue(array(
				 'name' => 'John Doe',
				 'age'  => 41
			 )));

		$storage->expects($this->once())
			->method('write')
			->with(
				$this->equalTo('user'),
				$this->equalTo(array(
					'name' => 'John Doe',
					'age'  => 41,
					'city' => 'NY'
				))
			);

		$emitter = $this->getMock('IEventEmitter');
		$emitter->expects($this->any())->method('notify');

		// create the user, add attribute, delete the user
		$user = new User($storage, $emitter);
		$user->setProperty('city', 'NY');
		$user->__destruct();
		unset($user);
	}
}
