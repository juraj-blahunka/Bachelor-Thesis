<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for ControllerRunner.
 * Generated by PHPUnit on 2010-04-26 at 20:03:28.
 */
class ControllerRunnerTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var ControllerRunner
	 */
	protected $object;

	/**
	 * @var EventEmitter
	 */
	protected $emitter;

	protected function setUp()
	{
		$this->emitter = new EventEmitter();
		$this->object  = new ControllerRunner($this->emitter);
	}

	protected function tearDown()
	{
	}

	public function testRespondTo_NoRouteFound()
	{
		$this->setExpectedException('NotFoundHttpException');
		$request = $this->getMock('IRequest');
		$this->object->respondTo($request);
	}

	public function testRespondTo_NoControllerFound()
	{
		$this->setExpectedException('NotFoundHttpException');
		$this->emitter->attach('route.load', array($this, 'handleRouteLoad'));
		$request = $this->getMock('IRequest');
		$this->object->respondTo($request);
	}

	public function testRun_CannotInvoke()
	{
		$this->setExpectedException('NotFoundHttpException');
		$this->emitter->attach('controller.load', array($this, 'handleControllerLoad'));
		$this->object->run($this->createRoute());
	}

	public function testRun_WithResponseOnly()
	{
		$this->emitter->attach('controller.load',   array($this, 'handleControllerLoad'));
		$this->emitter->attach('controller.invoke', array($this, 'handleControllerInvoke_Response'));
		$response = $this->object->run($this->createRoute());
		$this->assertThat($response, $this->isInstanceOf('IResponse'));
	}

	public function testRun_CannotView()
	{
		$this->setExpectedException('RuntimeException');
		$this->emitter->attach('controller.load',   array($this, 'handleControllerLoad'));
		$this->emitter->attach('controller.invoke', array($this, 'handleControllerInvoke_Presenter'));
		$this->object->run($this->createRoute());
	}

	public function testRun_RenderableAndResponse()
	{
		$this->emitter->attach('controller.load',   array($this, 'handleControllerLoad'));
		$this->emitter->attach('controller.invoke', array($this, 'handleControllerInvoke_Presenter'));
		$this->emitter->attach('controller.view_context', array($this, 'handleControllerViewContext'));
		$this->emitter->attach('controller.view', array($this, 'handleControllerView'));
		$response = $this->object->run($this->createRoute());
		$this->assertThat($response, $this->isInstanceOf('IResponse'));
	}

	// FACTORIES AND LISTENERS

	protected function createRoute()
	{
		return $this->getMock('IRoute');
	}

	public function handleRouteLoad(IEvent $e)
	{
		$e->setValue($this->createRoute());
		return true;
	}

	public function handleControllerLoad(IEvent $e)
	{
		$e->setValue($this->getMock('IController'));
		return true;
	}

	public function handleControllerInvoke_Response(IEvent $e)
	{
		$e->setValue($this->getMock('IResponse'));
		return true;
	}

	public function handleControllerInvoke_Presenter(IEvent $e)
	{
		$e->setValue(new ResponsePresenter($this->getMock('IResponse')));
		return true;
	}

	public function handleControllerViewContext(IEvent $e)
	{
		$presenter = $e->getParameter('presenter');
		$presenter->addVariables(array(
			'parameter' => '<h1>hello</h1>',
		));
		$presenter->getOriginalResponse()->expects($this->once())
			->method('setContent')->with($this->equalTo('<h1>hello</h1>'));
	}

	public function handleControllerView(IEvent $e)
	{
		$presenter = $e->getParameter('presenter');
		$response  = $presenter->getOriginalResponse();
		$variables = $presenter->getVariables();
		$response->setContent($variables['parameter']);
		$e->setValue($response);
		return true;
	}
}
