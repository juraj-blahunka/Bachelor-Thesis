<?php
require_once 'PHPUnit/Framework.php';

class ResponseStub_BasicViewLoadListener implements IResponse
{
	protected $c = '';

	public function setContent ($c) { $this->content = $c; }

	public function getContent () { return $this->content; }

	public function dispatch () {}

	public function write ($c) { $this->content .= $c; }
}

/**
 * Test class for BasicViewLoadListener.
 * Generated by PHPUnit on 2010-04-26 at 18:06:18.
 */
class BasicViewLoadListenerTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var BasicViewLoadListener
	 */
	protected $object;

	protected function setUp()
	{
		$paths = new PathCollection(array(
			'Basic.views' => array(
				FIXTURES_ROOT.'/Web/Listener/BasicViewLoadListener'
			)
		));
		$this->object = new BasicViewLoadListener($paths);
	}

	protected function tearDown()
	{
	}

	public function testHandle_SuccesfulRender()
	{
		$response = new ResponseStub_BasicViewLoadListener();

		$renderable = $this->getMock('IRenderableResponse');
		$renderable->expects($this->once())->method('getViewName')->will($this->returnValue('sample'));
		$renderable->expects($this->once())->method('getOriginalResponse')->will($this->returnValue($response));
		$renderable->expects($this->once())->method('getVariables')->will($this->returnValue(array(
			'heading' => 'View Listener',
			'subtitle' => 'Unit test',
		)));

		$route = $this->getMock('IRoute');
		$route->expects($this->once())->method('getPackage')->will($this->returnValue('Basic'));

		$e = new Event($this, 'controller.view', array(
			'response' => $renderable,
			'route'    => $route,
		));

		$this->assertThat(
			$this->object->handle($e),
			$this->equalTo(true)
		);

		$response = $e->getValue();

		$this->assertThat(
			$response->getContent(),
			$this->equalTo("<h1>View Listener</h1>\n<p>Unit test</p>\n")
		);
	}

	public function testHandle_FailingRender()
	{
		$renderable = $this->getMock('IRenderableResponse');
		$renderable->expects($this->once())->method('getViewName')->will($this->returnValue('undefined'));

		$route = $this->getMock('IRoute');
		$route->expects($this->once())->method('getPackage')->will($this->returnValue('Basic'));

		$e = new Event($this, 'controller.view', array(
			'response' => $renderable,
			'route'    => $route,
		));

		$this->assertThat(
			$this->object->handle($e),
			$this->equalTo(false)
		);
	}
}
