<?php
require_once 'PHPUnit/Framework.php';

require_once TEST_ROOT.'/Fixtures/Components/DependencyInjection/classes.php';

/**
 * Test class for LazyEventEmitter.
 * Generated by PHPUnit on 2010-04-17 at 14:45:32.
 */
class LazyEventEmitterTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var LazyEventEmitter
	 */
	protected $object;

	/**
	 * @var DependencyInjectionContainer
	 */
	protected $container;

	protected function setUp()
	{
		$this->container = new DependencyInjectionContainer();
		$this->object = new LazyEventEmitter($this->container);
		
	}

	protected function tearDown()
	{
	}

	public function testLazyNotification()
	{
		// register main types as singletons
		$this->container->define('WeakPunch');
		$this->container->define('PunchListener');
		// create lazy callable
		$this->object->attach('event', array('lazy', 'PunchListener', 'handle'));

		// WeakPunch is singleton, requires instantiation through container,
		// which returns the same instance in LazyEventEmitter::getListeners('event')
		// as here:
		$punchable = $this->container->getInstanceOf('WeakPunch');
		$this->assertFalse($punchable->wasPunched);

		// let the wheel spinning
		$this->object->notify(new Event($this, 'event'));

		$this->assertTrue($punchable->wasPunched);
	}

	public function testNoListeners()
	{
		$this->object->notify(new Event(null, 'undefined.event'));
	}
}
