<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for Controller.
 * Generated by PHPUnit on 2010-04-26 at 21:25:20.
 */
class ControllerTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var Controller
	 */
	protected $object;

	/**
	 * @var IDependencyInjectionContainer
	 */
	protected $container;

	protected function setUp()
	{
		$this->container = $this->getMock('IDependencyInjectionContainer');
		$this->object = new ControllerStub_ControllerSuite();
		$this->object->setContainer($this->container);
	}

	protected function tearDown()
	{
	}

	public function testIsAbstract()
	{
		$reflection = new ReflectionClass('Controller');
		$this->assertThat(
			$reflection->isAbstract(),
			$this->equalTo(true)
		);
	}

	public function testGetCommands()
	{
		$defaultValue = array();
		$this->assertThat(
			$this->object->getCommands(),
			$this->equalTo($defaultValue)
		);
	}

	public function testGetRequest()
	{
		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('request_service'))
			->will($this->returnValue($this->getMock('IRequest')));
		$this->assertThat(
			$this->object->getRequest(),
			$this->isInstanceOf('IRequest')
		);
	}

	public function testGetResponse()
	{
		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('response_service'))
			->will($this->returnValue($this->getMock('IResponse')));
		$this->assertThat(
			$this->object->getResponse(),
			$this->isInstanceOf('IResponse')
		);
	}

	public function testGetResponsePresenter()
	{
		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('response_service'))
			->will($this->returnValue($this->getMock('IResponse')));
		$this->container->expects($this->once())->method('getInstanceOfWith')
			->with($this->equalTo('response_presenter_service'))
			->will($this->returnValue($this->getMock('IResponsePresenter')));
		$this->assertThat(
			$this->object->getResponsePresenter(),
			$this->isInstanceOf('IResponsePresenter')
		);
	}

	public function testGetRouter()
	{
		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('router_service'))
			->will($this->returnValue($this->getMock('IRouter')));
		$this->assertThat(
			$this->object->getRouter(),
			$this->isInstanceOf('IRouter')
		);
	}

	public function testGetUser()
	{
		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('user_service'))
			->will($this->returnValue($this->getMock('IUser')));
		$this->assertThat(
			$this->object->getUser(),
			$this->isInstanceOf('IUser')
		);
	}

	public function testGetLogger()
	{
		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('logger_service'))
			->will($this->returnValue($this->getMock('ILogger')));
		$this->assertThat(
			$this->object->getLogger(),
			$this->isInstanceOf('ILogger')
		);
	}

	public function testGetPresenter()
	{
		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('some_presenter_service'))
			->will($this->returnValue('presenter_object'));
		$this->assertThat(
			$this->object->getPresenter('some_presenter_service'),
			$this->equalTo('presenter_object')
		);
	}

	public function testGetEventEmitter()
	{
		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('event_emitter_service'))
			->will($this->returnValue($this->getMock('IEventEmitter')));
		$this->assertThat(
			$this->object->getEventEmitter(),
			$this->isInstanceOf('IEventEmitter')
		);
	}

	public function testGenerateUrl()
	{
		$router = $this->getMock('IRouter');
		$router->expects($this->once())
			->method('generateUrl')->will($this->returnValue('/new/url'));
		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('router_service'))
			->will($this->returnValue($router));
		$this->assertThat(
			$this->object->generateUrl('by-some-name', array('router not configured')),
			$this->equalTo('/new/url')
		);
	}

	public function testRender()
	{
		$params = array('param1' => 'value1');
		$mock = $this->getMock('IResponsePresenter');
		$mock->expects($this->once())->method('setViewName')
			->with($this->equalTo('some/view'));
		$mock->expects($this->once())->method('addVariables')
			->with($this->equalTo($params));
		$this->container->expects($this->once())->method('getInstanceOfWith')
			->with($this->equalTo('response_presenter_service'))
			->will($this->returnValue($mock));
		$presenter = $this->object->render('some/view', $params);
		$this->assertThat($presenter, $this->identicalTo($mock));
	}

	public function testRedirect_Temporary()
	{
		$response = $this->getMock('IResponse');
		$response->expects($this->once())->method('setHttpStatusCode')
			->with($this->equalTo(302))->will($this->returnValue($response));
		$response->expects($this->once())->method('setHeader')
			->with($this->equalTo('Location'), $this->equalTo('http://www.example.com/'))
			->will($this->returnValue($response));

		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('response_service'))
			->will($this->returnValue($response));
		$this->assertThat(
			$this->object->redirect('http://www.example.com/'),
			$this->identicalTo($response)
		);
	}

	public function testRedirect_Permanent()
	{
		$response = $this->getMock('IResponse');
		$response->expects($this->once())->method('setHttpStatusCode')
			->with($this->equalTo(301))->will($this->returnValue($response));
		$response->expects($this->once())->method('setHeader')
			->with($this->equalTo('Location'), $this->equalTo('http://www.example.com/'))
			->will($this->returnValue($response));

		$this->container->expects($this->once())->method('getInstanceOf')
			->with($this->equalTo('response_service'))
			->will($this->returnValue($response));
		$this->assertThat(
			$this->object->redirect('http://www.example.com/', true),
			$this->identicalTo($response)
		);
	}

	public function testForward()
	{
		$route = $this->getMock('IRoute');
		$route->expects($this->once())->method('setPackage')->will($this->returnValue($route));
		$route->expects($this->once())->method('setController')->will($this->returnValue($route));
		$route->expects($this->once())->method('setAction')->will($this->returnValue($route));
		$route->expects($this->once())->method('setParameters')->will($this->returnValue($route));
		$request = $this->getMock('IRequest');
		$runner  = $this->getMock('IControllerRunner');
		$runner->expects($this->once())->method('run')->with($this->equalTo($route))
			->will($this->returnValue('ok'));

		$this->container->expects($this->exactly(3))->method('getInstanceOf')
			->will($this->onConsecutiveCalls($route, $request, $runner));

		$this->assertThat(
			$this->object->forward('package', 'controller', 'action', array('params')),
			$this->equalTo('ok')
		);
	}
}

class ControllerStub_ControllerSuite extends Controller {}

class PresenterStub_ControllerSuite extends Presenter {}
