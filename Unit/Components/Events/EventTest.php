<?php
require_once 'PHPUnit/Framework.php';


/**
 * Test class for Event.
 * Generated by PHPUnit on 2010-02-16 at 19:41:16.
 */
class EventTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var Event
	 */
	protected $object;

	protected function setUp()
	{
		$this->object = new Event(null, 'default.test', array());
	}

	protected function tearDown()
	{
	}

	public function testGetSender()
	{
		$this->assertThat(
			null,
			$this->equalTo($this->object->getSender()),
			'Testing with null sender'
		);

		$e = new Event($this, 'some.namespace');
		$this->assertThat(
			$this,
			$this->equalTo($e->getSender()),
			'Testing with $this sender'
		);
	}

	public function testGetName()
	{
		$this->assertEquals(
			'default.test',
			$this->object->getName()
		);
	}

	public function testGetParameters()
	{
		$this->assertEquals(
			array(),
			$this->object->getParameters()
		);

		$params = array('some param' => 'val', 'k' => 'v');
		$event = new Event(null, 'name', $params);
		$this->assertEquals(
			$params,
			$event->getParameters()
		);
	}

	public function testGetDefaultParameter()
	{
		$this->assertThat(
			$this->object->getParameter('undefined'),
			$this->equalTo(null)
		);
	}

	public function testGetDefinedDefaultParameter()
	{
		$this->assertThat(
			$this->object->getParameter('undefined', 'default'),
			$this->equalTo('default')
		);
	}

	public function testSetGetParameter()
	{
		$this->object->setParameter('param', 'value');
		$this->assertThat(
			$this->object->getParameter('param'),
			$this->equalTo('value')
		);
	}

	public function testHasUndefinedParameter()
	{
		$this->assertFalse($this->object->hasParameter('undefined_param'));
	}

	public function testHasParameter()
	{
		$this->assertFalse($this->object->hasParameter('flag'));
		$this->object->setParameter('flag', 'true');
		$this->assertTrue($this->object->hasParameter('flag'));
	}

	public function testIsHandled()
	{
		$this->assertEquals(
			false,
			$this->object->isHandled()
		);

		$this->object->setHandled(true);
		$this->assertEquals(
			true,
			$this->object->isHandled()
		);

	}

	public function testSetHandled()
	{
		$this->object->setHandled('special');
		$this->assertEquals(
			'special',
			$this->object->isHandled()
		);
	}

	public function testSetAndGetValue()
	{
		$this->assertEquals(
			null,
			$this->object->getValue()
		);

		$val = 'new ret val';
		$this->object->setValue($val);
		$this->assertEquals(
			$val,
			$this->object->getValue()
		);
	}
}
