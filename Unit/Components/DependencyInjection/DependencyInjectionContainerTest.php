<?php
require_once 'PHPUnit/Framework.php';

require_once TEST_ROOT.'/Fixtures/Components/DependencyInjection/classes.php';

class ExpectsArray
{
	private
		$options;

	function __construct(array $options)
	{
		$this->options = array_merge(array(
			'default1' => 'this is default string',
			'default2' => 'this is another default string',
		), $options);
	}
}

/**
 * Test class for DependencyInjectionContainer.
 * Generated by PHPUnit on 2010-03-05 at 19:42:12.
 */
class DependencyInjectionContainerTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var DependencyInjectionContainer
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new DependencyInjectionContainer;

		$this->object->addConstants(array(
			'for.creation.only' => '1234567890',
		));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	public function testMethodsAfterCreationExecution()
	{
		$this->object->registerComponent('other', 'CreateThis')
			->addArgument('reference', 'dependency_injection_container')
			->addArgument('constant', 'for.creation.only')
			->setScope('transient')
			->addMethod('afterConstruction', array(array('class', 'Undefined')))
			->addMethod('second');

		$create = $this->object->getComponentInstance('other');

		$this->assertTrue($create->isAfterConstructionExecuted());
		$this->assertTrue($create->isSecondExecuted());
	}

	public function testMyTestingTestToTestAllThingsToTest()
	{
		$this->object->registerComponent('with_array', 'ExpectsArray')
			->addArgument('array', array(
				'key' => array('value', 'some value for key'),
				'default1' => array('value', 'overwritten default'),
			));
	}

	public function testSelfInclusionInAdapters()
	{
		$container = $this->object->getComponentInstance('dependency_injection_container');
		$this->assertEquals($container, $this->object);
	}

	public function testCyclicDependence()
	{
		$this->setExpectedException('Exception');

		$this->object->registerComponent('cyclic', 'Cyclic')
			->addArgument('reference', 'cyclic');
		
		// whoa, crash!
		$cyclic = $this->object->getComponentInstance('cyclic');
	}

	/**
	 * @todo Implement testGetClassInstance().
	 */
	public function testGetClassInstance()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetComponentAdapter().
	 */
	public function testGetComponentAdapter()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetComponentInstance().
	 */
	public function testGetComponentInstance()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetConstant().
	 */
	public function testGetConstant()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSetComponentAdapter().
	 */
	public function testSetComponentAdapter()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSetConstant().
	 */
	public function testSetConstant()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}
}
