<?php
require_once 'PHPUnit/Framework.php';

require_once TEST_ROOT.'/Fixtures/Components/DependencyInjection/classes.php';

/**
 * Test class for DependencyInjectionContainer.
 * Generated by PHPUnit on 2010-03-05 at 19:42:12.
 */
class DependencyInjectionContainerTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var DependencyInjectionContainer
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new DependencyInjectionContainer;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

/*

	public function testMethodsAfterCreationExecution()
	{
		$this->object->addConstants(array(
			'for.creation.only' => '1234567890',
		));
		$this->object->registerComponent('Undefined');
		$this->object->registerComponent('other')
			->setClass('CreateThis')
			->addArgument('component', 'dependency_injection_container')
			->addArgument('constant',  'for.creation.only')
			->setScope('transient')
			->addMethod('afterConstruction', array(array('component', 'Undefined')))
			->addMethod('second');

		$create = $this->object->getInstanceOf('other');

		$this->assertTrue($create->isAfterConstructionExecuted());
		$this->assertTrue($create->isSecondExecuted());

		$this->object->registerComponent('other')
			->setClass('CreateThis')
			->addArgument('component', 'dependency_injection_container')
			->addArgument('constant',  'for.creation.only')
			->setScope('transient')
			->addMethod('afterConstruction')
			->addMethod('second');

		$create = $this->object->getInstanceOf('other');

		$this->assertThat($create,	$this->isInstanceOf('CreateThis'));
	}

	public function testMyTestingTestToTestAllThingsToTest()
	{
		$this->object->registerComponent('ExpectsArray')
			->addArgument('array', array(
				'key' => array('value', 'some value for key'),
				'default1' => array('value', 'overwritten default'),
			));

		$obj = $this->object->getInstanceof('ExpectsArray');
		$this->assertThat($obj, $this->isInstanceOf('ExpectsArray'));
		$this->assertThat($obj->options['default1'], $this->equalTo('overwritten default'));
		$this->assertThat($obj->options['default2'], $this->equalTo('this is another default string'));
	}

	public function testSelfInclusionInAdapters()
	{
		$container = $this->object->getInstanceOf('dependency_injection_container');
		$this->assertThat($container, $this->identicalTo($this->object));
		$container = $this->object->getInstanceOf('DependencyInjectionContainer');
		$this->assertThat($container, $this->identicalTo($this->object));
	}

	public function testCyclicDependence()
	{
		$this->setExpectedException('CyclicInstantiationException');

		$this->object->registerComponent('Cyclic');
		$cyclic = $this->object->getInstanceOf('Cyclic');
		$this->assertEquals(null, $cyclic);
	}

	public function testWithoutExplicitSetDependenciesThroughArgs()
	{
		$this->object->registerComponent('alternative_touchable')
			->setClass('AlternativeTouchable');
		$this->object->registerComponent('DependsOnTouchable')
			->setScope('shared');
		$instance = $this->object->getInstanceOf('DependsOnTouchable');
		$another  = $this->object->getInstanceOf('DependsOnTouchable');
		$this->assertThat($instance, $this->identicalTo($another));

		// overwrite DependsOnTouchable with transient adapter
		$this->object->registerComponent('DependsOnTouchable')
			->setScope('transient');
		$this->object->registerComponent('SimpleTouchable');
		$this->setExpectedException('AmbiguousArgumentException');
		$instance = $this->object->getInstanceOf('DependsOnTouchable');
	}

	public function testUndefinedComponentWithSpecifiedArguments()
	{
		$depends = $this->object->getInstanceOf('DependsOnTouchable', array(
			new ComponentArgument('AlternativeTouchable')
		));

		$this->assertThat($depends->touchable,	$this->isInstanceOf('AlternativeTouchable'));

		$depends = $this->object->getInstanceOf('DependsOnTouchable', array(
			new ComponentArgument('SimpleTouchable')
		));

		$this->assertThat($depends->touchable,	$this->isInstanceOf('SimpleTouchable'));
	}

	public function testUnregisteredClassInstance()
	{
		$this->object->registerComponent('SimpleTouchable');
		$depends = $this->object->getInstanceOf('DependsOnTouchable');
		$this->assertThat($depends, $this->isInstanceOf('DependsOnTouchable'));
		$this->assertThat($depends->touchable, $this->isInstanceof('SimpleTouchable'));
	}
*/

	/**
	 * @todo Implement testGetClassInstance().
	 */
	public function testGetClassInstance()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetComponentAdapter().
	 */
	public function testGetComponentAdapter()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testgetInstanceOf().
	 */
	public function testgetInstanceOf()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetConstant().
	 */
	public function testGetConstant()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSetComponentAdapter().
	 */
	public function testSetComponentAdapter()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSetConstant().
	 */
	public function testSetConstant()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}
}
