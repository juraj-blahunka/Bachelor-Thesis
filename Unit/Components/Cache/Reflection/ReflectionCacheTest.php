<?php
require_once 'PHPUnit/Framework.php';

require_once TEST_ROOT.'/Fixtures/Components/DependencyInjection/classes.php';

/**
 * Test class for ReflectionCache.
 * Generated by PHPUnit on 2010-04-11 at 20:13:55.
 */
class ReflectionCacheTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var ReflectionCache
	 */
	protected $object;

	protected function setUp()
	{
		$this->object = new ReflectionCache(
			new ClassReflectionCache(),
			new MethodReflectionCache()
		);
		$this->object->storeClass(new ReflectionClass('StrongPunch'));
		$this->object->storeMethod(new ReflectionMethod('DecoratedPunchable', 'punch'));
	}

	protected function tearDown()
	{
	}

	public function testStoreClass()
	{
		$reflection = new ReflectionClass('WeakPunch');
		$key = $this->object->storeClass($reflection);
		$this->assertThat($key, $this->equalTo('WeakPunch'));
		$this->assertThat(
			$this->object->retrieveClass('WeakPunch'),
			$this->identicalto($reflection)
		);
	}

	public function testRetrieveClass()
	{
		$reflection = $this->object->retrieveClass('StrongPunch');
		$this->assertThat($reflection, $this->isInstanceOf('ReflectionClass'));
		$this->assertThat($reflection->getName(), $this->equalTo('StrongPunch'));
	}

	public function testHasClass()
	{
		$this->assertTrue($this->object->hasClass('StrongPunch'));
		$this->assertFalse($this->object->hasClass('UndefinedPunch'));
	}

	public function testDeleteClass()
	{
		$this->assertTrue($this->object->hasClass('StrongPunch'));
		$this->object->deleteClass('StrongPunch');
		$this->assertFalse($this->object->hasClass('StrongPunch'));
	}

	public function testStoreMethod()
	{
		$class = get_class($this);
		$reflection = new ReflectionMethod($class, 'setUp');
		$key = $this->object->storeMethod($reflection);
		$this->assertThat($key, $this->equalTo('ReflectionCacheTest.setUp'));
	}

	public function testRetrieveMethod()
	{
		$reflection = $this->object->retrieveMethod('DecoratedPunchable', 'punch');
		$this->assertThat($reflection, $this->isInstanceOf('ReflectionMethod'));
		$this->assertThat($reflection->getDeclaringClass()->getName(), $this->equalTo('DecoratedPunchable'));
	}

	public function testRetrieveMethod_Undefined()
	{
		$this->setExpectedException('OutOfBoundsException');
		$this->object->retrieveMethod('DecoratedPunchable', 'justHurtMe');
	}

	public function testHasMethod()
	{
		$this->assertTrue($this->object->hasMethod('DecoratedPunchable', 'punch'));
		$this->assertFalse($this->object->hasMethod('DecoratedPunchable', 'undefinedMethod'));
		$this->assertFalse($this->object->hasMethod('UndefinedClass', 'undefinedMethod'));
	}

	public function testDeleteMethod_DeletesTheMethod_ButItIsAutomaticallyCreated()
	{
		$this->assertTrue($this->object->hasMethod('DecoratedPunchable', 'punch'));
		$this->object->deleteMethod('DecoratedPunchable', 'punch');

		// method is created on hasMethod call, because a class declaring DecoratingPunchable exists
		$this->setExpectedException('PHPUnit_Framework_ExpectationFailedException');
		$this->assertFalse($this->object->hasMethod('DecoratedPunchable', 'punch'));
	}

	public function testDeleteMethod_ConjunctionWithDeleteClass()
	{
		$this->assertTrue($this->object->hasMethod('DecoratedPunchable', 'punch'));
		$this->assertTrue($this->object->hasClass('DecoratedPunchable'));
		$this->object->deleteClass('DecoratedPunchable');
		$this->object->deleteMethod('DecoratedPunchable', 'punch');
		$this->assertFalse($this->object->hasClass('DecratedPunchable'));
		$this->assertFalse($this->object->hasMethod('DecratedPunchable', 'punch'));
	}

	public function testAutomaticallyCreateClassFromMethod()
	{
		$this->assertFalse($this->object->hasClass('WeakPunch'));
		$this->object->storeMethod(new ReflectionMethod('WeakPunch', 'punch'));
		$this->assertTrue($this->object->hasClass('WeakPunch'));
		$this->assertTrue($this->object->hasMethod('WeakPunch', 'punch'));
	}

	public function testAutomaticallyCreateMethod_BecauseClassGetsDeclared()
	{
		$this->assertFalse($this->object->hasMethod('WeakPunch', 'punch'));
		$this->assertFalse($this->object->hasClass('WeakPunch'));
		$this->object->storeClass(new ReflectionClass('WeakPunch'));
		$this->assertTrue($this->object->hasClass('WeakPunch'));
		$this->assertTrue($this->object->hasMethod('WeakPunch', 'punch'));
	}
}
