<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for RouterManager.
 * Generated by PHPUnit on 2010-04-27 at 14:03:38.
 */
class RouterManagerTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var RouterManager
	 */
	protected $object;

	protected function setUp()
	{
		$factory = new RouterFactory();
		$this->object = new RouterManager(
			new ValueUrlStrategy('/localhost/baseurl/'),
			$factory,
			new RouteMatcher(),
			new RoutingRuleCompiler($factory, array()),
			new UrlCreator()
		);
		$this->object->addRule(new RoutingRule('home', '/', array(
			'package'    =>'Default',
			'controller' =>'Default',
			'action'     =>'index'
		)));
	}

	protected function tearDown()
	{
	}

	public function testGetBasePath()
	{
		$this->assertThat(
			$this->object->getBasePath(),
			$this->equalTo('/localhost/baseurl')
		);
	}

	public function testAddRule()
	{
		$this->object->addRule($this->createControllerRule());
		$rules = $this->object->getRules();
		$this->assertThat(count($rules), $this->equalTo(2));
		$this->assertThat($rules['controller'], $this->isInstanceOf('ICompiledRule'));
	}

	public function testAddRules()
	{
		$this->object->addRules(array(
			$this->createControllerRule()
		));
		$rules = $this->object->getRules();
		$this->assertThat(count($rules), $this->equalTo(2));
		$this->assertThat($rules['home'], $this->isInstanceOf('ICompiledRule'));
		$this->assertThat($rules['controller'], $this->isInstanceOf('ICompiledRule'));
	}

	public function testGetRules()
	{
		$rules= $this->object->getRules();
		$this->assertThat(count($rules), $this->equalTo(1));
		$this->assertThat($rules['home'], $this->isInstanceOf('ICompiledRule'));
	}

	public function testGetRule()
	{
		$rule = $this->object->getRule('undefined');
		$this->assertThat($rule, $this->equalTo(null));
	}

	public function testGenerateUrl()
	{
		$this->object->addRule($this->createControllerRule());
		$url = $this->object->generateUrl('controller', array('controller' => 'my-controller'));
		$this->assertThat($url, $this->equalTo('/localhost/baseurl/my-controller'));
	}

	public function testFetchRoute()
	{
		$this->object->addRule($this->createControllerRule());
		$route = $this->object->fetchRoute('/special-controller');
		$this->assertThat($route, $this->isInstanceOf('IRoute'));
		$this->assertThat(
			$route->getController(),
			$this->equalTo('special-controller')
		);
	}

	public function testFetchRoute_Fails()
	{
		$route = $this->object->fetchRoute('/cannot/be/resolved');
		$this->assertThat($route, $this->equalTo(false));
	}

	protected function createControllerRule()
	{
		return new RoutingRule('controller', '{controller}', array(
			'package' => 'Default',
			'action'  => 'index',
		), array(
			'controller' => 'string'
		));
	}
}
