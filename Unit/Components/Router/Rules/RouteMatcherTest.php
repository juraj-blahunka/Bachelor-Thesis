<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for RouteMatcher.
 * Generated by PHPUnit on 2010-02-23 at 16:58:05.
 */
class RouteMatcherTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var RouteMatcher
	 */
	protected $object;

	/**
	 * @var IRoutingRuleCompiler
	 */
	protected $compiler;

	protected function setUp()
	{
		$this->object   = new RouteMatcher();
		$this->compiler = new RoutingRuleCompiler(
			new RouterFactory()
		);
	}

	protected function tearDown()
	{
	}

	private function createSlashRule()
	{
		return $this->compiler->compile(
			new RoutingRule(
				'defaultRule',
				'/',
				array(
					'controller' => 'Home',
					'action'     => 'Index',
					'package'    => 'Frontend',
				)
			)
		);
	}

	private function createControllerRule()
	{
		return $this->compiler->compile(
			new RoutingRule(
				'Controller Rule',
				'/{controller}',
				array(
					'action' => 'Index',
					'package'    => 'Frontend',
				)
			)
		);
	}

	private function createControllerActionRule()
	{
		return $this->compiler->compile(
			new RoutingRule(
				'Controller-View',
				'/{controller}/{action}',
				array(
					'controller' => 'Home',
					'action'     => 'Index',
					'package'    => 'Frontend',
				)
			)
		);
	}

	private function createCustomParamsRoute()
	{
		return $this->compiler->compile(
			new RoutingRule(
				'custom route',
				'/some_special_controller/year/{year}/month/{month}',
				array(
					'controller' => 'C',
					'action' => 'A',
					'package'    => 'Frontend',
				)
			)
		);
	}

	private function createRuleWithRequirements()
	{
		return $this->compiler->compile(
			new RoutingRule(
				'with req',
				'/post/{action}/year/{year}/month/{month}/',
				array(
					'controller' => 'post',
					'action'     => 'index',
					'package'    => 'Frontend',
				),
				array(
					'action'     => 'string',
					'year'       => 'int',
					'month'      => 'int',
				)
			)
		);
	}

	public function testDefaultHomeRouting()
	{
		$rule = $this->createSlashRule();
		$route = new Route();
		
		$result = $this->object->match('/', $rule, $route);
		$this->assertEquals(
			true,
			$result,
			'matched default route'
		);

		$this->assertEquals('Home', $route->getController());
		$this->assertEquals('Index', $route->getAction());
		$this->assertEquals('Frontend', $route->getPackage());

		// nothing to find
		$route = new Route();
		$result = $this->object->match('/other/url', $rule, $route);
		
		$this->assertEquals(
			false,
			$result,
			'no route found'
		);
	}

	public function testControllerRouting()
	{
		$rule = $this->createControllerRule();
		$route = new Route();

		$result = $this->object->match('/mycontroller123', $rule, $route);
		$this->assertEquals(
			'mycontroller123',
			$route->getController()
		);

		$this->assertEquals(
			'Index',
			$route->getAction()
		);

		$this->assertEquals(
			array(),
			$route->getParameters()
		);
	}


	public function testControllerActionRouting()
	{
		$rule = $this->createControllerActionRule();
		$route = new Route();

		$result = $this->object->match('/my_controller/my_action', $rule, $route);

		$this->assertEquals(
			true,
			$result,
			'matched controller and action'
		);

		$this->assertEquals(
			'my_controller',
			$route->getController()
		);

		$this->assertEquals(
			'my_action',
			$route->getAction()
		);
	}

	public function testCustomRouteWithYearMonthParameters()
	{
		$rule  = $this->createCustomParamsRoute();
		$route = new Route();

		$result = $this->object->match(
			'/some_special_controller/year/2009/month/january',
			$rule,
			$route
		);
		$parameters = $route->getParameters();

		$this->assertEquals(
			true,
			$result,
			'found match for custom rule'
		);

		$this->assertEquals(
			'C',
			$route->getController()
		);

		$this->assertEquals(
			'A',
			$route->getAction()
		);

		$this->assertEquals(
			'2009',
			$parameters['year']
		);

		$this->assertEquals(
			'january',
			$parameters['month']
		);

	}

	public function testRoutingWithRequirement()
	{
		$rule = $this->createRuleWithRequirements();
		$route = new Route();

		$result = $this->object->match(
			'/post/my_action/year/2007/month/12/',
			$rule,
			$route
		);

		$params = $route->getParameters();

		$this->assertEquals(
			true,
			$result
		);

		$this->assertEquals(
			'post',
			$route->getController()
		);

		$this->assertEquals(
			'my_action',
			$route->getAction()
		);
	}

	public function testFailingRequirement()
	{
		$rule = $this->createRuleWithRequirements();

		$result = $this->object->match(
			'/post/my_action/year/2009/month/here-is-a-string',
			$rule,
			new Route()
		);

		$this->assertEquals(
			false,
			$result
		);
	}
}