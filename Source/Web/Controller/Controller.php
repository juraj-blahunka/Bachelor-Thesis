<?php

/**
 * Application specific helper methods.
 *
 * @package    BachelorThesis
 * @subpackage Controller
 */
abstract class Controller extends BaseController
{
	private $_response;

	/**
	 * Override, to associate controller with executable commands.
	 *
	 * @return array
	 */
	public function getCommands()
	{
		return array();
	}

	/**
	 * Returns the Request service.
	 *
	 * @return IRequest
	 */
	public function getRequest()
	{
		return $this->container->getInstanceOf('request_service');
	}

	/**
	 * Returns the Response service.
	 *
	 * @return IResponse
	 */
	public function getResponse()
	{
		if ($this->_response === null)
			$this->_response = $this->container->getInstanceOf('response_service');
		return $this->_response;
	}

	/**
	 * Returns a Response Presenter service.
	 *
	 * @param IResponse $original
	 * @return IResponsePresenter
	 */
	public function getResponsePresenter(IResponse $original = null)
	{
		return $this->container->getInstanceOfWith('response_presenter_service', array(
			array('value', is_null($original) ? $this->getResponse() : $original)
		));
	}

	/**
	 * Returns Router service.
	 *
	 * @return IRouter
	 */
	public function getRouter()
	{
		return $this->container->getInstanceOf('router_service');
	}

	/**
	 * Returns User service.
	 *
	 * @return IUser
	 */
	public function getUser()
	{
		return $this->container->getInstanceOf('user_service');
	}

	/**
	 * Returns Logger service.
	 *
	 * @return ILogger
	 */
	public function getLogger()
	{
		return $this->container->getInstanceOf('logger_service');
	}

	/**
	 * Returns Presenter instance.
	 *
	 * @param string $name
	 */
	public function getPresenter($name)
	{
		$presenter = $this->container->getInstanceOf($name);
		return $presenter;
	}

	/**
	 * Get IEventEmitter instance from container.
	 *
	 * @return IEventEmitter
	 */
	public function getEventEmitter()
	{
		return $this->container->getInstanceOf('event_emitter_service');
	}

	/**
	 * Get an Url generated by Router for associated $name.
	 *
	 * @param string $name
	 * @param array $parameters
	 * @return string
	 */
	public function generateUrl($name, array $parameters = array())
	{
		return $this->getRouter()->generateUrl($name, $parameters);
	}

	/**
	 * Returns a filled Response Presenter object.
	 *
	 * @param mixed $view
	 * @param array $variables
	 * @return IResponsePresenter
	 */
	public function render($view, array $variables = array())
	{
		$presenter = $this->getResponsePresenter($this->getResponse());
		$presenter->setViewName($view);
		$presenter->addVariables($variables);
		return $presenter;
	}

	/**
	 * Returns a Response object with headers set to redirect to
	 * $url on dispatch.
	 *
	 * @param string $url
	 * @param bool $permanent
	 * @return IResponse
	 */
	public function redirect($url, $permanent = false)
	{
		$response = $this->getResponse()
			->setHttpStatusCode($permanent ? 301 : 302)
			->setHeader('Location', $url);

		return $response;
	}

	/**
	 * Forwards the current Request to another controller with
	 * additional parameters.
	 *
	 * @param string $package
	 * @param string $controller
	 * @param string $action
	 * @param array $parameters
	 * @return IResponse
	 */
	public function forward($package, $controller, $action, array $parameters = array())
	{
		$route = $this->container->getInstanceOf('Route');
		$route->setPackage($package)
			->setController($controller)
			->setAction($action)
			->setParameters($parameters);
		$this->getRequest()->setRoute($route);
		$runner = $this->container->getInstanceOf('controller_runner_service');
		return $runner->run($route);
	}
}
